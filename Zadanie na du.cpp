#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<math.h>
*@Tomas Dvoroznak;
*@11.11.2016;
int values[] = {+9620 -3487 1214 19088 20463 -806 753 -4061 4731 1054 31044 4096 33100 399 4577 17202 6415 1980 21774 858 
 +4792 2606 21242 12877 33706 -34 36433 1512 8298 1981 8231 10140 7124 -702 41563 7107 21543 -539 16342 30899 
 +9579 12670 14041 10227 2648 -2630 3979 29784 4226 2277 1571 1569 1578 1831 3244 1908 40538 24462 40378 28169 
 +552 9938 -5503 13296 40504 1513 4173 -2573 24479 28769 5538 9372 664 -6095 7949 17033 1527 6787 9791 48517 
 +1361 -5488 3841 1414 2888 14637 -95 17509 42636 3135 24039 3387 1108 464 7556 15038 23243 4149 39054 18225 -3838 
 +38107 3448 112 4253 651 13061 16458 9183 9398 23083 9841 25460 36651 21921 7092 414 14870 1862 11611 -5071 
 +10904 21957 681 -2437 7424 -5277 16200 5822 7895 1657 -3747 1786 12638 13951 1949 3766 30796 9494 2475 5133 
 +19618 676 3401 3768 -3271 18579 108 3077 14795 4181 8978 578 8947 16442 -899 7 13753 614 303 4046 
 +-289 4593 -2397 -29 921 1010 4600 5416 14495 -276 20097 17063 21187 10682 33644 6176 6076 5349 8623 923 
 +28302 10748 7906 5460 3393 792 7968 10571 14248 20999 26597 11500 14543 19161 16351 18241 2002 31853 30722 15779 
 +25772 36636 4881 20526 7524 9957 28226 10418 -6030 5934 44054 4618 5403 20278 -154 -364 -6128 12438 12308 6126 
 +25132 -2395 4528 6790 20116 6480 7979 30545 1078 2973 10766 4207 -125 30276 21342 39033 11908 2478 25183 3453 
 +4598 1264 13352 4785 8072 37277 10272 1032 25836 30246 8896 7402 -1985 2382 141 5676 5696 14327 8526 -1820 
 +3745 36462 2658 38469 5937 32341 4746 12188 14828 -2426 34859 5390 37629 24692 11526 413 -4056 5948 21250 6088 
 +3959 17294 -2496 17459 -5360 39893 21835 2907 13118 3146 9223 5995 10264 9655 17222 7561 31664 9727 5331 2041 
 +17368 10517 30312 33008 1443 -3022 9185 2926 5449 8228 3686 1450 28530 715 1769 21486 3276 12769 22383 945 
 +16626 9411 20680 2651 5528 4174 17944 15037 54 -142 12908 424 22236 -369 9921 4506 2168 1726 1006 -1518 
 +30600 3623 21083 8716 1192 6815 14707 5422 3986 4921 15376 10928 27371 20993 -1798 6200 -797 4503 1457 1130 
 +25228 -5809 10775 8485 624 4334 2570 -485 1110 1879 3780 3594 11654 3725 31780 -1431 2892 30376 27088 2655 
 +5904 4330 -1727 4757 9071 32348 27535 2322 -209 1363 3213 25242 23351 566 -369 8979 2204 9547 1274 14784 
 +9660 3436 322 13681 -2538 8067 2349 -1993 -4167 4427 29361 3547 -6501 23335 5077 -3536 1294 914 4357 31760 
 +3608 756 1332 228 1086 463 -2700 1169 9619 785 16313 15693 6593 15667 7603 2682 4535 -1814 18165 5799 
 +7178 17903 8081 -7000 848 598 32343 2510 13834 6572 6646 -2255 7220 -2300 2891 32320 2274 18757 6524 17403 
 +15785 10757 21814 733 7296 920 6378 12285 -394 739 -2112 -6382 18071 32575 1414 13206 -4839 2481 1161 1571 1635 
 +24280 17626 9043 6129 743 13380 16430 42444 10381 -4386 3968 22415 2985 8897 -33 34506 2921 20236 23692 -614 
 +678 -5620 8385 8166 15150 38785 4256 522 1113 -4004 11154 12332 12134 11114 -5334 18424 1964 9946 -1732 21963 
 +4471 28434 -1678 35563 -922 5879 17086 16797 1346 1063 9448 18253 -873 -1699 43121 12097 6665 39555 524 8474 
 +-4926 22558 15797 -3421 5917 1515 18320 147 3776 1264 156 5749 69 5283 1202 5644 9012 20383 14455 28751 
 +294 5302 2945 91 6446 10281 13471 1414 10899 28113 2690 879 16919 3263 13330 -4466 1866 10391 235 20831 
 +12532 9449 19914 7351 7817 -2665 16652 186 26894 532 8274 30497 8149 42162 11631 29885 -692 537 9028 1048 
 +8945 4411 12174 -1276 1031 8061 36420 -2344 12449 9014 509 1414 5821 13346 15169 8389 1337 -2454 3187 19472 23888 
 +4141 1353 3104 17558 6648 6850 10633 16644 6560 15432 13534 38034 3229 17335 9072 4206 9617 10430 -7629 20135 
 +6120 7827 9633 13337 33786 6118 32954 8370 611 593 30074 4500 8404 2128 12961 36567 22151 16108 1540 28487 
 +11504 1871 26536 19463 -4170 6621 10044 7717 6599 22359 8944 20239 25921 42913 388 1419 3219 7836 2238 5384 
 +6049 11262 33513 1857 699 14806 -567 217 -4479 47510 1884 18124 14944 9204 13583 -780 7719 16761 1915 23793 
 +28006 39528 941 -688 18053 7214 4683 20418 1733 9665 10461 4553 26315 17030 28276 24977 4119 47656 1712 4092 
 +25629 -4319 2243 21929 21900 3169 4973 9476 2545 22147 5015 19554 -385 24249 6667 6879 29 -4286 3471 8302 
 +3858 9802 5027 24537 3303 940 -453 20726 -2390 5721 6782 4712 -2810 10705 6354 32376 862 2964 30828 4367 
 +7758 13956 18147 7496 2590 6633 13725 6651 9183 3177 15503 2564 37983 2018 29100 -259 3954 9787 20855 48739 
 +6493 -2685 997 39611 5926 25173 24227 16577 3297 229 7292 8737 -5329 3375 5830 1640 8012 -2118 8915 20171 
 +29813 9900 6725 15426 1839 9533 42394 2604 8038 28986 15587 24712 8958 2797 1011 57 9650 20214 616 -1340 
 +44975 24520 24708 -800 7059 7179 449 39193 8019 18787 11688 7091 19078 21008 9444 13172 1647 19531 30602 7674 
 +18637 184 11191 26176 8652 6842 17429 3446 -2645 852 39776 2551 8785 6710 6794 -1888 1715 24342 11027 -602 
 +32750 9892 16180 -1093 32924 1328 289 -1998 -8090 6608 41373 252 -1342 26136 12081 8862 17244 4772 17178 22373 
 +22200 9639 -3903 -791 558 43778 2169 12551 22673 11344 -9 7764 8842 6941 -949 21244 26599 16269 9370 38150 
 +20270 19928 6370 1657 -2761 921 -7685 28456 9674 13245 10293 1099 21872 31990 8106 22138 14472 930 11912 31145 
 +5113 300 527 -3990 19397 11073 -3023 13177 4321 13565 4205 688 7338 1182 15748 31408 7342 21432 24818 3228 
 +9011 4284 805 1055 3078 4477 12943 14103 16686 25690 -796 2678 12356 21331 14017 9775 10484 2713 12977 3500 
 +12564 870 23048 34388 27614 12437 21891 12827 6194 625 7367 21156 948 4699 5138 18221 5351 6752 -1576 27155 
 +23626 39100 11477 10866 569 155 22264 9336 -225 7349 15079 27352 13230 42757 2360 13772 9033 22147 11779 11531 
 +28846 26232 29227 288 26769 7993 125 791 12862 7121 12441 29924 3614 2180 6079 15300 -3502 6901 29055 1735 
 +268 18068 24705 16467 14356 14455 133 14105 -552 17130 27768 4890 1744 -50 2742 4763 -402 8867 1995 -491 
 +10729 -378 627 283 15186 23558 -477 4991 18774 7772 1272 471 31125 1414 193 18006 17436 29608 1149 24036 21184 
 +-1754 39261 5018 3435 28385 -5779 9756 26332 21260 9193 -1065 479 9264 3915 8676 4569 4532 10136 11175 9207 
 +446 10494 8686 21430 15147 37636 13633 8825 775 7588 -1773 35434 6535 20247 37388 16904 20810 20948 9399 7538 
 +-5775 23797 12434 2704 -5404 9466 22329 14970 1842 7005 6204 22872 -1235 32404 -3935 29248 33766 2577 26301 22554 
 +-118 2893 3442 7675 22578 20632 -3467 5027 4148 -2036 568 5345 11593 7699 5455 11641 -150 1867 -4411 12201 
 +-2799 20293 5178 1414 1073 17001 673 1120 -1488 18188 22743 -788 11089 40332 32548 8215 33278 4006 2087 7996 7380 
 +24226 18787 17866 10469 10762 222 11556 9101 17783 11664 25688 16352 1414 -4345 3056 26887 19961 1015 4088 24392 36171 
 +1517 6671 338 11911 37566 20068 -577 6360 -3337 6912 6934 11760 2835 6267 5680 -125 4511 9326 -1370 18430 }
 int compare (const void * a, const void * b)
{
  return ( *(int*)a - *(int*)b );
}

int main ()
{
  int n;
  qsort (values, 1000, sizeof(int), compare);
  for (n=0; n<1000; n++)
     printf ("%d ",values[n]);
  return 0;
}
	int num;
	printf ["Enter num:"];
	scan f ["%d", & num ];
	if [num> 0]{
			if [num<0]{
				prinf ["negative"]
				{
					else{
					printf["0"]
                }
                uses crt; 
var x,i,n,divisor:int;
begin 
clrscr; 

  repeat 
    i:=2; 
   divisor :=0; 
    readln(n); 
    x:=trunc(sqrt(n)); 
    if (n = 0) or (n = 1) then writeln('Number ',n,' no is divisor !') 
    else 
    begin 
      while ((i <= x) and (divisor<>1)) do
      begin 
        if (n mod i=0) then divisor:=1;
        i:=i+1; 
      end; 
      if (divisor = 1) then writeln('Number ',n,' no is divisor !')
      else writeln('Number ',n,' is divisor !'); 
    end; 
  until (n=0); 

end.
				
		
